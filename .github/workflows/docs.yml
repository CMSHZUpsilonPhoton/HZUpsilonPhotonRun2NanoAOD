name: website

# build the documentation whenever there are new commits on main
on:
  push:
    branches:
      - main
    # Alternative: only build for tags.
    # tags:
    #   - '*'

# security: restrict permissions for CI jobs.
permissions:
  contents: read



jobs:
  example-4:
    name: Ex4 Linux
    runs-on: "ubuntu-latest"
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: foo
          python-version: 3.9
          environment-file: environment.yml
          channels: conda-forge
          allow-softlinks: true
          channel-priority: flexible
          show-channel-urls: true
          use-only-tar-bz2: true
      - run: |
          conda info
          conda list
          conda config --show-sources
          conda config --show
      - run:
  # Build the documentation and upload the static HTML files as an artifact.
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3

      # ADJUST THIS: install all dependencies (including pdoc)
      - run: pip install -e .
      # ADJUST THIS: build your documentation into docs/.
      - run: docs/make.py
      # We use a custom build script for pdoc itself, ideally you just run `pdoc -o docs/ ...` here.

      - run: tar --directory docs/ -hcf artifact.tar .
      - uses: actions/upload-artifact@v3
        with:
          name: github-pages
          path: ./artifact.tar

  # Deploy the artifact to GitHub pages.
  # This is a separate job so that only actions/deploy-pages has the necessary permissions.
  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v1
